<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git Commands</title>
      <link href="/2022/09/21/Git-Commands/"/>
      <url>/2022/09/21/Git-Commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h3><p>专用名词</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><p>新建代码库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><p>增加&#x2F;删除文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><p>代码提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend   ...</span><br></pre></td></tr></table></figure><p>分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete </span><br><span class="line">$ git branch -dr </span><br></pre></td></tr></table></figure><p>标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><p>查看信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached []</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p>远程同步</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置远程仓库地址</span><br><span class="line">$ git remote add origin url</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除远程仓库</span><br><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><p>撤销</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复某个commit的指定文件到工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复上一个commit的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当前分支的时间线</span><br><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 暂存</span><br><span class="line">$ git stash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存到工作区</span><br><span class="line">$ git stash apply</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 暂存列表</span><br><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清除暂存</span><br><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用户使用条款</title>
      <link href="/2022/08/30/termsOfUse/"/>
      <url>/2022/08/30/termsOfUse/</url>
      
        <content type="html"><![CDATA[<p>请仔细阅读本条款,除此使用条款外，我们不时发布的适用于服务的任何法律声明（所有这些法律声明中的条款下称“额外条款”）亦构成您和我们之间关于您使用本产品的具有法律约束力的协议。如果额外条款的内容和此使用条款的内容发生任何冲突，则应以额外条款为准。</p><h4 id="1、接受本条款"><a href="#1、接受本条款" class="headerlink" title="1、接受本条款"></a>1、接受本条款</h4><p>您在使用本产品提供的各项服务之前，应仔细阅读本使用条款。如您不同意本使用条款及&#x2F;或我们不时发布的额外条款，您可以主动卸载本应用产品；您一旦使用服务，即视为您已了解并完全同意本服务条款及额外条款的各项内容，并成为本产品的用户。</p><h4 id="2、我们提供的服务"><a href="#2、我们提供的服务" class="headerlink" title="2、我们提供的服务"></a>2、我们提供的服务</h4><p>我们不断创新研发迭代以向您提供最优体验。您认知并同意我们提供的服务的形式和本质可不经事先通知您而不时变换。<br>我们需要定期或不定期地对提供服务的平台或相关的设备进行检修或者维护，如因此类情况而造成服务的中断，您应予以理解。<br>您认知并同意我们可自行决定，无须事先通知您，即停止（永久或暂时）向您或全体用户提供服务。</p><h4 id="3、仅供个人使用"><a href="#3、仅供个人使用" class="headerlink" title="3、仅供个人使用"></a>3、仅供个人使用</h4><p>本产品仅供您个人用于非商业用途。如果要将与服务有关或派生的任何资料、服务或软件用于销售或其它商业用途，则必须得到我们的允许。<br>您在使用服务时，不得损害、禁用、影响服务或使服务负担过重，也不得影响任何其它方使用此产品。如果您对产品有任何意见，或有如何改进的建议，可向我们提出。请注意，如果这样做，还会授予我们和第三方在服务中无偿使用和加入您的建议或意见的权利。</p><h4 id="4、隐私政策"><a href="#4、隐私政策" class="headerlink" title="4、隐私政策"></a>4、隐私政策</h4><p>本隐私政策适用于您与本产品页面的交互行为。尊重用户隐私是我们的一项基本政策。我们有网站上公布的<a href="http://zhangzhaopds.github.io/2022/08/30/privacyForPlayer/index.html">隐私政策</a>。收集、存储、使用、披露和保护您的个人信息。请您完整阅读上述隐私权政策，以帮助您更好地保护您的个人信息。</p><h4 id="5、付费服务协议"><a href="#5、付费服务协议" class="headerlink" title="5、付费服务协议"></a>5、付费服务协议</h4><p>用户按照APP内指定的支付方式完成支付一定的服务费用后，用户可以享受对应的付费服务。购买成功后该服务即可生效。<br>具体服务种类、价格、内容以相应服务界面的公布为准，用户可以根据自己需要自行选择相应服务。一旦用户购买服务，即视为您认可该服务标明的价格。我们会根据产品和服务内容的变化，对现有服务种类和价格进行调整，以不断完善和优化服务。<br>用户购买服务后，可以在不同移动苹果设备上使用自己的账号，并享受购买的服务。<br>我们按照本条款提供服务，但不承诺解决因为用户自身引起的问题，包括且不限于用户设备硬件故障，网络故障引起的问题。</p><h4 id="6、责任限制"><a href="#6、责任限制" class="headerlink" title="6、责任限制"></a>6、责任限制</h4><p>您认知并同意，我们可能会以非人工检索方式自动生成到第三方网页的链接，我们不存储、控制或修改该等第三方网页中的内容，且不对该等第三方网页或资源的可用性负责，亦不对该等网络或资源上的或从该等网站或资源获得的任何广告、产品或其他材料加以认可。<br>您理解并同意自主选择、使用服务的风险自负，并且对于因使用服务而对计算机系统造成的损坏或数据的丢失，您应承担全部责任。<br>在适用法律允许的最大范围内，我们明确表示不提供任何其他类型的保证，不论使明示的或默示的，包括但不限于适销性、适用性、可靠性、准确性、完整性、无病毒以及无错误的任何默示保证和责任。另外，在适用法律允许的最大范围内，我们并不担保服务一定能满足您的要求，也不担保服务不会被修改、中断或终止，并且对服务的及时性、安全性、错误发生，以及信息是否能准确、及时、顺利的传送均不作任何担保。<br>在适用法律允许的最大范围内，我们不就因您使用服务引起的或与服务有关的任何意外的、非直接的、特殊的、或间接的损害或请求（包括但不限于因人身伤害、因隐私泄漏、因未能履行包括诚信或合理谨慎在内的任何责任、因过失和因任何其他金钱上的损失或其他损失而造成的损害赔偿）承担任何责任。</p><h4 id="7、本条款的变更"><a href="#7、本条款的变更" class="headerlink" title="7、本条款的变更"></a>7、本条款的变更</h4><p>我们可不时对服务条款作出变更并通过适当方式向您提示变更内容。您理解并同意，如果您在服务条款作出变更后继续使用服务，则视为接受该变更。</p><h4 id="8、一般法律条款"><a href="#8、一般法律条款" class="headerlink" title="8、一般法律条款"></a>8、一般法律条款</h4><p>用户使用本产品和服务时，承诺准守当地法律法规，社会制度，国家利益，公民合法权益，公共秩序，社会道德风尚。不得利用本产品和服务违反法律和法规。<br>如出现纠纷，双方协商一致解决；如果双方无法通过协商解决，则双方同意由中国成都仲裁机构，在成都进行仲裁解决。</p><p>上述条款是各方针对本文主题的全部协议，优先于并取代所有以前或同期对此类主题的书面或口头的规定或协议。<br>本协议中的标题仅为方便而设，在解释本协议时应被忽略。</p><p>如您对本协议内容有任何疑问，可发邮件至邮箱（<a href="mailto:&#122;&#104;&#x61;&#x6e;&#103;&#x7a;&#104;&#x61;&#x6f;&#x70;&#100;&#x73;&#x40;&#105;&#99;&#x6c;&#x6f;&#117;&#x64;&#x2e;&#x63;&#x6f;&#x6d;">&#122;&#104;&#x61;&#x6e;&#103;&#x7a;&#104;&#x61;&#x6f;&#x70;&#100;&#x73;&#x40;&#105;&#99;&#x6c;&#x6f;&#117;&#x64;&#x2e;&#x63;&#x6f;&#x6d;</a>）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>隐私政策</title>
      <link href="/2022/08/30/privacyForPlayer/"/>
      <url>/2022/08/30/privacyForPlayer/</url>
      
        <content type="html"><![CDATA[<p>在不影响软件使用的情况下，软件会最大限度的不获取用户的信息。因为我们坚信，“不获取是对用户隐私最好的保护方式”。</p><h4 id="会收集的信息"><a href="#会收集的信息" class="headerlink" title="会收集的信息"></a>会收集的信息</h4><p>1、收集实现产品功能所必须的信息。例如手机型号、操作系统信息、位置信息、相册权限。<br>2、会收集信息只为提供更加个性化的服务和体验。例如你注册账号时的手机号码、邮箱、密码。<br>3、收集改善用户体验的信息。例如用户操作习惯。</p><h4 id="信息的使用"><a href="#信息的使用" class="headerlink" title="信息的使用"></a>信息的使用</h4><p>1、实现产品功能。例如，操作系统信息是为了更好的适配您的手机。<br>2、体验的优化。例如，用户操作习惯，更好的设计应用布局和功能，优化使用体验。</p><h4 id="您的选择"><a href="#您的选择" class="headerlink" title="您的选择"></a>您的选择</h4><p>1、用户操作习惯的信息搜集，您选择我们的软件，默认您允许我们搜集此信息，此信息不针对个人，不定位到个人。如果您不允许可停止软件的使用。<br>2、相册权限，位置信息，开始收集前会有提示，如果您不允许搜集，可能会影响一些功能的使用，你可以在应用或者手机设置中关闭。</p><h4 id="我们的责任和保证"><a href="#我们的责任和保证" class="headerlink" title="我们的责任和保证"></a>我们的责任和保证</h4><p>我们有必要遵守相关法律义务，遵循相关法规要求，解决纠纷，防止欺诈和滥用。<br>我们保证不主动向第三方透漏用户的隐私信息，我们不针对单个个人的隐私信息进行分析，我们将尽力保护用户的隐私信息安全。<br>如果出现管理变更或软件出售，我们可以在保证安全的情况下向第三方共享您的信息，该第三方有权在符合《隐私权政策》条款的情况下使用该信息。<br>我们有可能适时修订此政策内容，如果有修订后继续使用我们的服务，即表示同意修订的隐私政策。<br>如果您对本政策有疑问你可以通过<a href="mailto:&#x7a;&#104;&#x61;&#110;&#103;&#122;&#x68;&#x61;&#x6f;&#112;&#x64;&#115;&#64;&#105;&#99;&#108;&#x6f;&#x75;&#x64;&#x2e;&#99;&#111;&#x6d;">&#x7a;&#104;&#x61;&#110;&#103;&#122;&#x68;&#x61;&#x6f;&#112;&#x64;&#115;&#64;&#105;&#99;&#108;&#x6f;&#x75;&#x64;&#x2e;&#99;&#111;&#x6d;</a>联系我们，我们将尽快审核涉及的问题，并予以回复。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
